package org.apache.hadoop.io.erasurecode.coder.util.tracerepair;

public class DualBasisTable {

    private int totalBlkNum;

    public DualBasisTable(int totalBlkNum) {
        this.totalBlkNum = totalBlkNum;
    }

    public byte[] getRow(int row) {
        switch (this.totalBlkNum) {
            case 9:
                return Scheme_9_6[row];
            case 11:
                return Scheme_11_8[row];
            case 12:
                return Scheme_12_8[row];
            case 14:
                return Scheme_14_10[row];
            default:
                throw new RuntimeException("Invalid policy is used.");
        }
    }

    public byte getByte(int row, int column) {
        switch (this.totalBlkNum) {
            case 9:
                return Scheme_9_6[row][column];
            case 11:
                return Scheme_11_8[row][column];
            case 12:
                return Scheme_12_8[row][column];
            case 14:
                return Scheme_14_10[row][column];
            default:
                throw new RuntimeException("Invalid policy is used.");
        }
    }

    private final byte[][] Scheme_9_6 = { { 78, -109, -44, 102, 26, -82, -72, -101 },
            { -127, -115, -59, 81, 107, -27, 10, 79 }, { 36, -96, 25, -55, 100, 3, 82, -13 },
            { 97, -86, -57, -32, -102, -11, 51, 89 },
            { -88, 122, 63, -40, 56, -64, 116, -30 }, { 10, 79, -23, 15, 3, 103, -122, -107 },
            { -14, 119, -74, -85, -76, 26, 78, -109 },
            { 123, 4, 33, 9, 124, 28, -14, 119 }, { -32, 39, 117, 52, -33, -1, 96, 124 } };

    private final byte[][] Scheme_11_8 = { { 17, 97, -111, -113, 55, -86, 108, -67 },
            { 84, 39, 21, 36, 61, -57, 72, -96 },
            { 96, 30, -108, 110, 124, -47, -59, 76 }, { 9, 68, -94, -19, 40, -36, 53, 112 },
            { 61, 92, 98, 101, 105, -61, -51, -43 }, { 9, -1, -29, -24, 40, 32, 64, -39 },
            { -99, 74, -120, 17, -19, -20, -91, 55 },
            { -24, -21, -123, 88, -39, -66, -14, -68 },
            { 11, 113, -102, -118, -103, 75, -11, 20 },
            { 32, -34, -17, -100, -33, 41, -63, 59 },
            { -106, -25, -66, 109, 116, 63, 85, 43 } };

    private final byte[][] Scheme_12_8 = { { -63, -11, -78, 120, 46, 111, -44, 99 },
            { 120, -102, 100, -49, 99, -11, 3, 30 },
            { 25, 111, -45, 99, -55, -102, 126, 27 }, { 126, 94, -3, 29, -83, 114, -111, -74 },
            { 103, 78, -63, -106, 100, -109, 46, 116 }, { 84, -51, -71, -14, 61, -81, 77, 119 },
            { 35, -100, -68, 119, -72, 59, -28, -123 }, { 111, -73, 76, -84, -102, 125, 34, 5 },
            { -39, 74, 50, -107, 49, -20, -113, 19 }, { -124, -77, 110, 73, 36, 2, 76, -117 },
            { 41, 39, 126, 101, -9, -57, -83, -43 }, { 27, 78, -102, 37, 120, -109, -11, 118 } };

    private final byte[][] Scheme_14_10 = { { 69, -99, -53, 83, 10, -19, 97, 37 },
            { -26, 50, -54, 42, -23, -113, -73, -112 },
            { -69, -23, 100, -15, -4, 15, 3, 16 }, { 48, 102, -14, -73, 62, -78, 119, 125 },
            { -107, 26, 62, 88, 19, -82, 14, -68 }, { 32, -116, -127, 72, -33, -38, -115, 93 },
            { -53, 112, 102, 67, 97, -99, -78, -60 }, { -53, 80, -33, 13, 97, 66, -1, 87 },
            { -7, 1, -94, -59, -18, -42, 53, 81 }, { 73, 114, 124, 9, -117, 44, 28, 40 },
            { -53, 18, -41, 85, 97, 80, 1, -21 }, { -21, 55, 61, -97, -66, 38, 105, 92 },
            { -2, -20, 70, 23, -10, -90, 109, -7 }, { 70, 23, -2, -20, 109, -7, -10, -90 } };
}
